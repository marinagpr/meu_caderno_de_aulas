{
  "hash": "ff5b81a3683f6714905ad813c54ded82",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Pacotes\"\nformat: html\n---\n\n\n\n\n## Pacote`Dplyr`\n\nO dplyr é um pacote do R voltado para manipulação e transformação de dados de forma rápida, clara e intuitiva. Ele faz parte do tidyverse, o conjunto de pacotes para ciência de dados no R. Seu principal objetivo é facilitar o trabalho com data frames, permitindo filtrar, selecionar, agrupar, ordenar, resumir e transformar dados de maneira organizada.\n\n### Principais funções:\n\n**`filter()`** – Seleciona **linhas** com base em condições.\n\n**`select()`** – Seleciona **colunas** específicas.\n\n**`mutate()`** – Cria **novas colunas** ou transforma colunas existentes.\n\n**`arrange()`** – Ordena as linhas por uma ou mais colunas.\n\n**`summarise()`** – Resume os dados, gerando estatísticas (média, soma, etc).\n\n**`group_by()`** – Agrupa os dados por categorias para realizar resumos em cada grupo.\n\n### Trabalhando em um conjunto de dados\n\nCarregar o pacote\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n:::\n\n\n\n\nImportar dados\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gsheet)\ndados_nuvem <- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=465348652#gid=465348652\")\n\ndados_mg <- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=983033137#gid=983033137\")\n\ndados_survey <- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=1118819738#gid=1118819738\")\n```\n:::\n\n\n\n\nManipulação\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndados_survey |>\n  group_by(species) |>\n  count() #Conta quantas observações existem em dados_survey para cada species.\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n# Groups:   species [2]\n  species     n\n  <chr>   <int>\n1 Fgra      552\n2 Fspp      114\n```\n\n\n:::\n\n```{.r .cell-code}\ndados_survey |>\n  group_by(residue) |>\n  count() #Conta quantas observações existem para cada tipo de residue.\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n# Groups:   residue [3]\n  residue     n\n  <chr>   <int>\n1 corn      169\n2 soybean   281\n3 <NA>      216\n```\n\n\n:::\n\n```{.r .cell-code}\ndados_survey |>\n  group_by(state, residue) |>\n  count() #Conta o número de observações para cada combinação de state e residue.\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n# Groups:   state, residue [3]\n  state residue     n\n  <chr> <chr>   <int>\n1 PR    <NA>      216\n2 RS    corn      169\n3 RS    soybean   281\n```\n\n\n:::\n\n```{.r .cell-code}\nRS <- dados_survey |>\n  filter(state== \"RS\")\n\nPR <- dados_survey |>\n  filter(state== \"PR\") #filtrando dados por estado criando dois data frames\n\ncombinado <- rbind(RS, PR) #Combina os dois em um único data frame.\n\nsurvey_b <- dados_survey |>\n  select(year, state, species) #Cria survey_b contendo apenas as colunas year, state e species.\n\nsurvey_2009 <- dados_survey |>\n  select(year, state, species) |>\n  filter(year== 2009)\n\nsurvey_2010 <- dados_survey |>\n  select(year, state, species) |>\n  filter(year== 2010)\n\nsurvey_2011 <- dados_survey |>\n  select(year, state, species) |>\n  filter(year== 2011) #Filtra dados por ano\n```\n:::\n\n\n\n\n## Pacote `janitor`\n\nO pacote é utilizado para limpeza e organização de dados, focado em deixar nomes de colunas limpos e consistentes; gerar tabelas de contingência prontas para relatórios; facilitar detecção de valores duplicados ou ausentes. Ele é extremamente útil em análises exploratórias, relatórios e pré-processamento de dados, tornando o fluxo de trabalho mais limpo e rápido.\n\n### Principais funções:\n\n**`clean_names()` -** Limpa os nomes das colunas, transformando-os em nomes minúsculos e separados por `_`, removendo espaços e caracteres especiais.\n\n**`tabyl()`**- Cria **tabelas de frequência (contingência)** de forma rápida.\n\n**`adorn_*`**-Funções para **adicionar percentuais, totais de linha/coluna e formatação** em tabelas geradas por `tabyl()`:\n\n-   `adorn_totals()` – adiciona totais.\n\n-   `adorn_percentages()` – adiciona percentuais.\n\n-   `adorn_rounding()` – arredonda valores.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(janitor)\n\nsurvey_b |> tabyl(state, species) #Gera uma tabela cruzada mostrando quantas observações existem de cada species por state.\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n state Fgra Fspp\n    PR  150   66\n    RS  402   48\n```\n\n\n:::\n\n```{.r .cell-code}\nsurvey_b |> tabyl(species, year) #Gera uma tabela cruzada mostrando quantas observações existem de cada species por year.\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n species 2009 2010 2011\n    Fgra  225  187  140\n    Fspp   40   29   45\n```\n\n\n:::\n:::\n\n\n\n\n## Pacote `tidyr`\n\nÉ um pacote do tidyverse que fornece ferramentas para arrumar (tidy) dados no R, deixando-os em um formato limpo e organizado, o que facilita análises e visualizações.\n\n### Principais funções:\n\n`pivot_longer()` - transforma colunas em linhas. Útil para converter formato largo ➔ formato longo.\n\n`pivot_wider()` - Transforma linhas em colunas. Útil para converter formato longo ➔ formato largo.\n\n`separate()` - Separa uma coluna em múltiplas colunas, com base em um separador.\n\n`unite()` - Combina múltiplas colunas em uma única coluna.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyr)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Transformação para formato largo usando pivot_wider\ndat_mg2 <- dat_mg %>%\n  pivot_wider(names_from = \"trat\", values_from = \"comp\") %>%\n  select(-rep) # Remove coluna 'rep' se presente\n\n# Visualização das colunas, estrutura e primeiras linhas\nnames(dat_mg2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Mg2\"     \"control\"\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(dat_mg2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 10\nColumns: 2\n$ Mg2     <dbl> 9.0, 12.5, 10.0, 8.0, 13.2, 11.0, 10.8, 9.5, 10.8, 10.4\n$ control <dbl> 13.72, 15.91, 15.70, 14.20, 15.90, 16.54, 18.00, 14.40, 16.41,…\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(dat_mg2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n    Mg2 control\n  <dbl>   <dbl>\n1   9      13.7\n2  12.5    15.9\n3  10      15.7\n4   8      14.2\n5  13.2    15.9\n6  11      16.5\n```\n\n\n:::\n\n```{.r .cell-code}\n#glimpse() para ver tipos de dados + primeiros valores por coluna (estrutura).\n#head() para ver as primeiras linhas dos dados (conteúdo).\n```\n:::\n",
    "supporting": [
      "pacotedplyr_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}